# -*- coding: utf-8 -*-
"""7월

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zGcuupBh2ofPxZFk5WY52xUW6L0hR5eg
"""

import pandas as pd
from pandas import DataFrame
from pandas import Series
import numpy as np
from google.colab import files
import io

# Commented out IPython magic to ensure Python compatibility.
import os
import sys
sys.path.append(os.pardir)
import graphviz
# import mglearn
# import xgboost as xgb
import seaborn as sns
import warnings
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
# %matplotlib inline
import datetime

df1 = pd.read_csv('./df.csv')
df1
df1 = df1.rename(columns={'LpDate':'ds'})
df1 = df1[['ds']]
df1

df1



df = pd.read_csv('./df_ggg.csv')
df

df = df.rename(columns={'LpDate':'run_datetime'})

df = df.drop({'Unnamed: 0', 'ahu_id', 'inv_id', 'LpID', 'ahu_ret_temp', 'ahu_set_hum', 'ahu_out_hum', 'ahu_ret_hum', 'ahu_sup_temp', 'ahu_sup_hum'}, axis = 'columns')
df

df = df1.join(df)

df

df = df.rename(columns={'inv_A':'inv_kWh'})



df['ds'] = pd.to_datetime(df['ds'], errors='coerce')

df

plt.figure(figsize=(9, 9))
g = sns.heatmap(df.corr(), annot=True, cmap='RdYlGn')

pip install holiday

pip install pystan~=2.14

!pip install cmdstanpy==0.9.68

!pip install pystan==2.19.1.1

!pip install prophet

pip install fbprophet

import pandas as pd 
from fbprophet import Prophet 
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt
from prophet.plot import add_changepoints_to_plot
import holiday

df

df.dtypes

# sns.set(rc={'figure.figsize':(25,10)})
# sns.lineplot(x=df.index , y=df['LpData'])

df = df.rename(columns={'LpDate':'ds'})
df = df.rename(columns={'LpData':'y'})

pip install plotly

plt.figure(figsize=(9, 9))
g = sns.heatmap(df.corr(), annot=True, cmap='RdYlGn')

df

temp_df = df[:8673] # 날짜 기간 나누기 
study_df = pd.DataFrame() # 빈데이터 프레임 생성 
study_df['ds'] = temp_df.reset_index(drop=False)['ds'] # 시간 부분 넣기 
study_df['y'] =temp_df.reset_index(drop=False)['y'] # 최대 전력 수요량 넣기

8673+706

df

study_df

model = Prophet(changepoint_prior_scale=0.01)  # 변곡점을 조금더 높여 예측하였다. 
mod = model.fit(study_df) # 모댈 생성 

df['cap'] = 1500
df['floor'] = 0
future = model.make_future_dataframe(periods=706,freq='H') #일자 기준으로 365일 예측 설정 
future['cap'] = 1500
future['floor'] = 0
m = Prophet(growth='logistic')
m.fit(df)

forecast = mod.predict(future)
fig = model.plot(forecast)
a = add_changepoints_to_plot(fig.gca(), model, forecast)



forecast

result = pd.DataFrame()
result = forecast[['yhat_lower','yhat_upper','yhat']]
temp_df = pd.DataFrame()
temp_df = df[8673:]
result['real'] = temp_df['ds'].reset_index(drop=True)
temp_df.reset_index(inplace=True)
result['ds'] = temp_df['ds']
result.dropna(inplace=True)
result.set_index('ds',drop=True,inplace=True)
result

result.describe()

def vsplot(df):
  plt.plot(df.index,df['yhat'], label='forecast data', color='blue')
  plt.fill_between(df.index,df['yhat_upper'],df['yhat_lower'],color='skyblue',label='80% confidence interval')
  plt.scatter(df.index,df['real'], label='Real data ', color='black')
  plt.legend()
  plt.xlabel('ds')
  plt.ylabel('y')
  plt.show()

df.info()

df.plot(x='ds')
plt.show()

fig = model.plot_components(forecast)

fig = model.plot(forecast)
a = add_changepoints_to_plot(fig.gca(), model, forecast)

holidays = pd.DataFrame(columns=['ds','holiday'])
model=Prophet(seasonality_prior_scale =0.1,
    weekly_seasonality=True,
    yearly_seasonality=10,
    daily_seasonality=False,
    seasonality_mode='additive',
    changepoints=None, # CP가 발생하는 시점들의 list
    n_changepoints=25, # CP의 수
    changepoint_range=0.8, # CP의 기존 데이터 수 대비 최대 비율
    changepoint_prior_scale=0.05,
    holidays=None, # 휴일 또는 이벤트 시점 dataframe
    holidays_prior_scale=10.0,
    interval_width=0.8, # 추세 예측 정확도 구간범위
    mcmc_samples=0) # 계절성 예측 정확도 제어)

model.add_country_holidays(country_name='KOR')
forecast = model.fit(study_df).predict(future)

forecast

forecast.info()







fig = model.plot(forecast)

df1 = df.set_index('ds')
df1

df1.plot(figsize=(30,10), y = 'y', xlabel='year-month', ylabel='reward amount')

fig = model.plot(forecast, figsize=(30,10), xlabel='year-month', ylabel='reward amount')

df1.plot(figsize=(30,10), y = 'y', xlabel='year-month', ylabel='reward amount')
fig = model.plot(forecast, figsize=(30,10), xlabel='year-month', ylabel='reward amount')

from matplotlib import pyplot

forecast1 = forecast.set_index('ds')
forecast1

qa = forecast1[8673:-1]

qa = qa[['yhat', 'yhat_lower', 'yhat_upper']]

qa

run_datetime = qa.reset_index()[['ds']]

run_datetime

run_datetime = run_datetime.astype(str)

run_datetime.info()

run_datetime['ds'] = run_datetime['ds'].str.replace(" ", "")

run_datetime['ds'] = run_datetime['ds'].str.replace("-", "")

run_datetime['ds'] = run_datetime['ds'].str[:10]
run_datetime

run_datetime = run_datetime.rename(columns={'ds':'run_datetime'})

tqr = run_datetime.join(qa.reset_index())

tqr

tqr['y'] = tqr['yhat']

tqr

tqr

vvv = pd.read_csv('./dsft.csv')
vvv

vvv = vvv.drop('Unnamed: 0', axis='columns')
vvv

vvv.info()

tqr.info()

tqr['run_datetime'] = tqr['run_datetime'].astype(int)
tqr['ds'] = tqr['ds'].astype(object)

tqr.info()

tp = pd.merge(vvv, tqr, how='outer')

tp

tp = tp.sort_values(by=['run_datetime'], ascending=[True])
tp

tp = tp.reset_index(drop=True)

tp

tp.plot()

tp.plot(figsize=(30,10) , y=['y', 'yhat_lower', 'yhat_upper', 'yhat'])

foredf = pd.concat([df1, forecast1], axis=1)
foredf

foredf

foredf2 = foredf.reset_index()

foredf2

foredf2[7968:-1]

foredf3 = foredf2[:8673]

foredf.plot(figsize=(30,10), y = 'y', xlabel='year-month', ylabel='lpdata')



foredf.plot(figsize=(30,10) , y=['y', 'yhat_lower', 'yhat_upper', 'yhat'])
# , y=['y', 'yhat_lower', 'yhat_upper', 'yhat']

foredf

foredf.info()

new = foredf[['run_datetime', 'y', 'yhat', 'yhat_lower', 'yhat_upper']]

new

df10 = pd.read_csv('./10월예측비교.csv')

df10

8673+706

df10.plot(figsize=(30,10) , y=['y', 'yhat_lower', 'yhat_upper', 'yhat'])

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_squared_log_error

a = df10['yhat']
a1 = df10['yhat_lower']
a2 = df10['yhat_upper']

b = df10['y']

print('r2_score : {:.3f}'.format(r2_score(a, b)))
print('MAE      : {:.6f}'.format(mean_absolute_error(a, b)))
print('MSE : {:.3f}'.format(mean_squared_error(a, b)))
print('RMSE : {:.3f}'.format(np.sqrt(mean_squared_error(a, b))))
print('RMSLE : {:.3f}'.format(np.sqrt(mean_squared_log_error(a, b))))

print('r2_score : {:.3f}'.format(r2_score(a1, b)))
print('MAE      : {:.6f}'.format(mean_absolute_error(a1, b)))
print('MSE : {:.3f}'.format(mean_squared_error(a1, b)))
print('RMSE : {:.3f}'.format(np.sqrt(mean_squared_error(a1, b))))
print('RMSLE : {:.3f}'.format(np.sqrt(mean_squared_log_error(a1, b))))

print('r2_score : {:.3f}'.format(r2_score(a2, b)))
print('MAE      : {:.6f}'.format(mean_absolute_error(a2, b)))
print('MSE : {:.3f}'.format(mean_squared_error(a2, b)))
print('RMSE : {:.3f}'.format(np.sqrt(mean_squared_error(a2, b))))
print('RMSLE : {:.3f}'.format(np.sqrt(mean_squared_log_error(a2, b))))

metric_df = foredf3.set_index('ds')

metric_df = df10[{'ds', 'yhat', 'y'}]
metric_df

r2 = r2_score(metric_df.y, metric_df.yhat)
r2

mse = mean_squared_error(metric_df.y, metric_df.yhat)
mse

mae = mean_absolute_error(metric_df.y, metric_df.yhat)
mae

metrics.rmse(metric_df.y, metric_df.yhat)

pip install ml_metrics

import ml_metrics as metrics

metrics.mae(metric_df.y, metric_df.yhat)

metrics.ae(metric_df.y, metric_df.yhat)

metrics.rmse(metric_df.y, metric_df.yhat)